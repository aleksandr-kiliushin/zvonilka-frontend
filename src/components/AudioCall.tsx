import { useState, useEffect, useRef, useCallback } from "react";
import Peer from "peerjs";
import type { MediaConnection } from "peerjs";
import "./AudioCall.css";

interface CallState {
  isConnected: boolean;
  isCalling: boolean;
  isMuted: boolean;
  isReceivingCall: boolean;
  incomingCallId: string | null;
}

const AudioCall = () => {
  const [peer, setPeer] = useState<Peer | null>(null);
  const [myId, setMyId] = useState<string>("");
  const [remoteId, setRemoteId] = useState<string>("");
  const [callState, setCallState] = useState<CallState>({
    isConnected: false,
    isCalling: false,
    isMuted: false,
    isReceivingCall: false,
    incomingCallId: null,
  });
  const [status, setStatus] = useState<string>("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...");
  const [audioLevel, setAudioLevel] = useState<number>(0);

  const localStreamRef = useRef<MediaStream | null>(null);
  const currentCallRef = useRef<MediaConnection | null>(null);
  const remoteAudioRef = useRef<HTMLAudioElement>(null);
  const audioContextRef = useRef<AudioContext | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const animationRef = useRef<number | null>(null);

  const [isPeerLoading, setIsPeerLoading] = useState(true);

  useEffect(() => {
    const initPeer = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebRTC
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          setStatus("‚ùå WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ HTTPS (–∫—Ä–æ–º–µ localhost)
        if (
          location.protocol === "http:" &&
          location.hostname !== "localhost"
        ) {
          setStatus("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS –¥–ª—è —Ä–∞–±–æ—Ç—ã WebRTC");
          return;
        }

        setStatus("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");

        // –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≥—Ä—É–∑–∫—É PeerJS
        await new Promise((resolve) => setTimeout(resolve, 100));

        // @ts-ignore
        const peerInstance = new Peer(undefined, {
          debug: 1, // –£–º–µ–Ω—å—à–∏–ª–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
          config: {
            iceServers: [
              { urls: "stun:stun.l.google.com:19302" },
              { urls: "stun:stun1.l.google.com:19302" },
            ],
          },
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ü–ï–†–ï–î —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π peer –≤ state
        peerInstance.on("open", (id: string) => {
          console.log("‚úÖ Peer ID:", id);
          setMyId(id);
          setIsPeerLoading(false); // –£–±–∏—Ä–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
          setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º");
        });

        peerInstance.on("call", handleIncomingCall);

        peerInstance.on("error", (error) => {
          console.error("‚ùå PeerJS Error:", error);
          setStatus(`–û—à–∏–±–∫–∞ P2P: ${error.message}`);
          // –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
          setTimeout(() => {
            if (!peer) initPeer();
          }, 3000);
        });

        peerInstance.on("disconnected", () => {
          console.log("üîå Peer disconnected");
          setStatus("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
          // –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
          setTimeout(() => {
            if (peerInstance && !peerInstance.destroyed) {
              peerInstance.reconnect();
            }
          }, 1000);
        });

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º peer –≤ state —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
        setPeer(peerInstance);
      } catch (error) {
        console.error("‚ùå Failed to initialize peer:", error);
        setStatus("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ P2P");
      }
    };

    initPeer();

    return () => {
      if (peer && !peer.destroyed) {
        peer.destroy();
      }
      if (localStreamRef.current) {
        localStreamRef.current.getTracks().forEach((track) => track.stop());
      }
    };
  }, []); // –£–±–∏—Ä–∞–µ–º peer –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  const handleIncomingCall = useCallback((call: MediaConnection) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ call —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!call || !call.peer) {
      console.error("‚ùå Invalid incoming call");
      return;
    }

    console.log("üìû Incoming call from:", call.peer);
    setCallState((prev) => ({
      ...prev,
      isReceivingCall: true,
      incomingCallId: call.peer,
    }));
    setStatus(`üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${call.peer.substring(0, 8)}...`);

    const timer = setTimeout(() => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ call –≤—Å–µ –µ—â–µ –≤–∞–ª–∏–¥–µ–Ω
      if (call && !call.open) {
        answerCall(call);
      }
    }, 2000);

    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –∑–≤–æ–Ω–∫–∞
    call.on("close", () => {
      clearTimeout(timer);
      handleCallEnd();
    });
  }, []);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
  const getLocalStream = async (): Promise<MediaStream> => {
    if (localStreamRef.current) {
      return localStreamRef.current;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
          sampleRate: 48000,
          channelCount: 1,
        },
        video: false,
      });

      localStreamRef.current = stream;
      console.log("üé§ Local stream obtained with enhanced settings");

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—É–¥–∏–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
      setupAudioAnalyser(stream);

      return stream;
    } catch (error) {
      console.error("‚ùå Error getting user media:", error);
      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    }
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—É–¥–∏–æ
  const setupAudioAnalyser = (stream: MediaStream) => {
    try {
      const audioContext = new (window.AudioContext ||
        (window as any).webkitAudioContext)();
      const source = audioContext.createMediaStreamSource(stream);
      const analyser = audioContext.createAnalyser();

      analyser.fftSize = 256;
      source.connect(analyser);

      audioContextRef.current = audioContext;
      analyserRef.current = analyser;

      startAudioLevelMonitoring();
    } catch (error) {
      console.warn("‚ö†Ô∏è Could not setup audio analyser:", error);
    }
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∞—É–¥–∏–æ
  const startAudioLevelMonitoring = () => {
    const updateLevel = () => {
      if (analyserRef.current && callState.isConnected) {
        const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);
        analyserRef.current.getByteFrequencyData(dataArray);

        const average =
          dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;
        setAudioLevel(average / 255); // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–æ 0-1
      }

      animationRef.current = requestAnimationFrame(updateLevel);
    };

    updateLevel();
  };

  const startCall = async () => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ peer –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
    if (!peer || peer.destroyed) {
      setStatus("‚ùå P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ");
      return;
    }

    if (!remoteId.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
      return;
    }

    try {
      setCallState((prev) => ({ ...prev, isCalling: true }));
      setStatus("üé§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");

      const stream = await getLocalStream();
      setStatus("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É...");

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ –≤—ã–∑–æ–≤–æ–º
      if (!peer || peer.destroyed) {
        throw new Error("P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ");
      }

      const call = peer.call(remoteId.trim(), stream);

      if (!call) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫");
      }

      // ... –æ—Å—Ç–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞
    } catch (error) {
      console.error("‚ùå Error starting call:", error);
      setStatus(
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞"
      );
      setCallState((prev) => ({ ...prev, isCalling: false }));
    }
  };

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫
  const answerCall = async (call: MediaConnection) => {
    try {
      setStatus("üé§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");
      const stream = await getLocalStream();

      console.log("‚úÖ Answering call from:", call.peer);
      call.answer(stream);

      call.on("stream", (remoteStream) => {
        console.log("üéß Received remote stream in answer");
        handleRemoteStream(remoteStream);
      });

      call.on("close", () => {
        console.log("üì¥ Answered call closed");
        handleCallEnd();
      });

      currentCallRef.current = call;
      setCallState((prev) => ({
        ...prev,
        isConnected: true,
        isReceivingCall: false,
        incomingCallId: null,
      }));
      setStatus("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    } catch (error) {
      console.error("‚ùå Error answering call:", error);
      setStatus(
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"
      );
      setCallState((prev) => ({
        ...prev,
        isReceivingCall: false,
        incomingCallId: null,
      }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
  const handleRemoteStream = (remoteStream: MediaStream) => {
    console.log("üîä Setting remote stream");
    if (remoteAudioRef.current) {
      remoteAudioRef.current.srcObject = remoteStream;
      remoteAudioRef.current.play().catch((error) => {
        console.error("‚ùå Error playing remote audio:", error);
      });
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const handleCallEnd = () => {
    console.log("üìû Ending call");

    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }

    if (audioContextRef.current) {
      audioContextRef.current.close();
      audioContextRef.current = null;
    }

    if (currentCallRef.current) {
      currentCallRef.current.close();
      currentCallRef.current = null;
    }

    if (localStreamRef.current) {
      localStreamRef.current.getTracks().forEach((track) => {
        track.stop();
        console.log("‚èπÔ∏è Stopped track:", track.kind);
      });
      localStreamRef.current = null;
    }

    if (remoteAudioRef.current) {
      remoteAudioRef.current.srcObject = null;
    }

    setCallState({
      isConnected: false,
      isCalling: false,
      isMuted: false,
      isReceivingCall: false,
      incomingCallId: null,
    });
    setAudioLevel(0);
    setStatus("üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");

    setTimeout(() => {
      setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º");
    }, 2000);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  const toggleMute = () => {
    if (localStreamRef.current) {
      const audioTrack = localStreamRef.current.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        const newMutedState = !audioTrack.enabled;
        setCallState((prev) => ({ ...prev, isMuted: newMutedState }));
        console.log("üîá Muted:", newMutedState);
      }
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(myId);
      setStatus("üìã ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
      setTimeout(() => setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º"), 2000);
    } catch (error) {
      console.error("‚ùå Clipboard error:", error);
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement("textarea");
      textArea.value = myId;
      textArea.style.position = "fixed";
      textArea.style.left = "-999999px";
      textArea.style.top = "-999999px";
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);
      setStatus("üìã ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
      setTimeout(() => setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º"), 2000);
    }
  };

  return (
    <div className="audio-call">
      <div className="call-container">
        <header>
          <h1>üéß P2P Audio Call</h1>
          <div className="version-info">
            React {import.meta.env.DEV ? "19.1.1" : ""} + Vite{" "}
            {import.meta.env.DEV ? "7.0.0" : ""}
          </div>
        </header>

        <div className="connection-info">
          <div className="id-section">
            <label>–í–∞—à ID:</label>
            <div className="id-input-group">
              <input
                type="text"
                value={myId}
                readOnly
                className="id-input"
                placeholder="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏..."
              />
              <button
                onClick={copyToClipboard}
                className="copy-btn"
                disabled={!myId}
                title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID"
              >
                üìã
              </button>
            </div>
          </div>

          <div className="remote-id-section">
            <label>ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:</label>
            <input
              type="text"
              value={remoteId}
              onChange={(e) => setRemoteId(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞"
              className="remote-id-input"
              disabled={callState.isConnected || callState.isCalling}
            />
          </div>
        </div>

        <div className="call-controls">
          {!callState.isConnected &&
            !callState.isCalling &&
            !callState.isReceivingCall && (
              <button
                onClick={startCall}
                className="call-btn primary"
                disabled={!peer || !remoteId.trim()}
              >
                üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å
              </button>
            )}

          {callState.isCalling && (
            <button onClick={handleCallEnd} className="call-btn danger">
              ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          )}

          {callState.isReceivingCall && (
            <div className="incoming-call">
              <div className="pulse-indicator"></div>
              <p>üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫...</p>
              <p>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫</p>
            </div>
          )}

          {callState.isConnected && (
            <>
              <button
                onClick={toggleMute}
                className={`call-btn ${
                  callState.isMuted ? "muted" : "unmuted"
                }`}
                title={
                  callState.isMuted ? "–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" : "–û—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"
                }
              >
                {callState.isMuted ? "üîá –í–∫–ª—é—á–∏—Ç—å" : "üé§ –û—Ç–∫–ª—é—á–∏—Ç—å"}
              </button>
              <button onClick={handleCallEnd} className="call-btn danger">
                üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ */}
        {callState.isConnected && !callState.isMuted && (
          <div className="audio-level-indicator">
            <div className="audio-level-label">–£—Ä–æ–≤–µ–Ω—å –∑–≤—É–∫–∞:</div>
            <div className="audio-level-bar">
              <div
                className="audio-level-fill"
                style={{ width: `${audioLevel * 100}%` }}
              ></div>
            </div>
          </div>
        )}

        <div
          className={`status ${
            callState.isConnected
              ? "connected"
              : callState.isCalling
              ? "calling"
              : ""
          }`}
        >
          <span>{status}</span>
          {callState.isConnected && (
            <div className="connection-indicator">
              <span className="indicator-dot"></span>–í —ç—Ñ–∏—Ä–µ
            </div>
          )}
        </div>

        {/* –°–∫—Ä—ã—Ç—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ */}
        <audio
          ref={remoteAudioRef}
          autoPlay
          playsInline
          style={{ display: "none" }}
        />
        {isPeerLoading && (
          <div className="loading-indicator">
            <div className="spinner"></div>
            <p>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...</p>
          </div>
        )}
      </div>
    </div>
  );
};

export default AudioCall;
