import { useState, useEffect, useRef, useCallback } from "react";
import Peer from "peerjs";
import type { MediaConnection } from "peerjs";
import "./AudioCall.css";

interface CallState {
  isConnected: boolean;
  isCalling: boolean;
  isMuted: boolean;
  isReceivingCall: boolean;
  incomingCallId: string | null;
}

const generateRandomId = (): string => {
  return Math.floor(Math.random() * 90 + 10).toString();
};

const AudioCall = () => {
  const [peer, setPeer] = useState<Peer | null>(null);
  const [myId, setMyId] = useState<string>("");
  const [remoteId, setRemoteId] = useState<string>("");
  const [callState, setCallState] = useState<CallState>({
    isConnected: false,
    isCalling: false,
    isMuted: false,
    isReceivingCall: false,
    incomingCallId: null,
  });
  const [status, setStatus] = useState<string>("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...");
  const [audioLevel, setAudioLevel] = useState<number>(0);
  const [isPeerLoading, setIsPeerLoading] = useState(true);

  const localStreamRef = useRef<MediaStream | null>(null);
  const currentCallRef = useRef<MediaConnection | null>(null);
  const remoteAudioRef = useRef<HTMLAudioElement>(null);
  const audioContextRef = useRef<AudioContext | null>(null);
  const analyserRef = useRef<AnalyserNode | null>(null);
  const animationRef = useRef<number | null>(null);

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ audio —ç–ª–µ–º–µ–Ω—Ç–∞
  useEffect(() => {
    if (remoteAudioRef.current) {
      remoteAudioRef.current.volume = 1.0;
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
  const handleIncomingCall = useCallback((call: MediaConnection) => {
    if (!call || !call.peer) {
      console.error("‚ùå Invalid incoming call");
      return;
    }

    console.log("üìû Incoming call from:", call.peer);
    setCallState((prev) => ({
      ...prev,
      isReceivingCall: true,
      incomingCallId: call.peer,
    }));
    setStatus(`üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫ –æ—Ç ${call.peer}...`);

    const timer = setTimeout(() => {
      answerCall(call);
    }, 2000);

    call.on("close", () => {
      clearTimeout(timer);
      handleCallEnd();
    });
  }, []);

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è PeerJS
  useEffect(() => {
    const initPeer = async () => {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É WebRTC
        if (!navigator.mediaDevices || !navigator.mediaDevices.getUserMedia) {
          setStatus("‚ùå WebRTC –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –≤ —ç—Ç–æ–º –±—Ä–∞—É–∑–µ—Ä–µ");
          setIsPeerLoading(false);
          return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–∞ HTTPS (–∫—Ä–æ–º–µ localhost)
        if (
          location.protocol === "http:" &&
          location.hostname !== "localhost"
        ) {
          setStatus("‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è HTTPS –¥–ª—è —Ä–∞–±–æ—Ç—ã WebRTC");
          setIsPeerLoading(false);
          return;
        }

        setStatus("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...");

        const peerInstance = new Peer(generateRandomId(), {
          debug: 1,
          config: {
            iceServers: [
              { urls: "stun:stun.l.google.com:19302" },
              { urls: "stun:stun1.l.google.com:19302" },
            ],
          },
        });

        peerInstance.on("open", (id: string) => {
          console.log("‚úÖ Peer ID:", id);
          setMyId(id);
          setIsPeerLoading(false);
          setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º");
        });

        peerInstance.on("call", handleIncomingCall);

        peerInstance.on("error", (error) => {
          console.error("‚ùå PeerJS Error:", error);

          // –ï—Å–ª–∏ ID –∑–∞–Ω—è—Ç, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π
          if (error.type === "unavailable-id") {
            const newId = generateRandomId();
            console.log("üîÑ ID –∑–∞–Ω—è—Ç, –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π:", newId);
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—ã—Ç–∞–µ–º—Å—è —Å –Ω–æ–≤—ã–º ID
            setTimeout(initPeer, 500);
            return;
          }

          setStatus(`–û—à–∏–±–∫–∞ P2P: ${error.message}`);
          setIsPeerLoading(false);
        });

        peerInstance.on("disconnected", () => {
          console.log("üîå Peer disconnected");
          setStatus("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...");
          setTimeout(() => {
            if (peerInstance && !peerInstance.destroyed) {
              peerInstance.reconnect();
            }
          }, 1000);
        });

        setPeer(peerInstance);
      } catch (error) {
        console.error("‚ùå Failed to initialize peer:", error);
        setStatus("–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ P2P");
        setIsPeerLoading(false);
      }
    };

    initPeer();

    return () => {
      if (animationRef.current) {
        cancelAnimationFrame(animationRef.current);
      }
      if (audioContextRef.current) {
        audioContextRef.current.close();
      }
      if (peer && !peer.destroyed) {
        peer.destroy();
      }
      if (localStreamRef.current) {
        localStreamRef.current.getTracks().forEach((track) => track.stop());
      }
    };
  }, [handleIncomingCall]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ–¥–∏–∞ –ø–æ—Ç–æ–∫–∞
  const getLocalStream = async (): Promise<MediaStream> => {
    if (localStreamRef.current) {
      return localStreamRef.current;
    }

    try {
      const stream = await navigator.mediaDevices.getUserMedia({
        audio: {
          echoCancellation: true,
          noiseSuppression: true,
          autoGainControl: true,
        },
        video: false,
      });

      localStreamRef.current = stream;
      console.log("üé§ Local stream obtained");

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—É–¥–∏–æ
      setupAudioAnalyser(stream);

      return stream;
    } catch (error) {
      console.error("‚ùå Error getting user media:", error);

      // –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤
      if (error instanceof Error) {
        switch (error.name) {
          case "NotAllowedError":
            throw new Error(
              "–†–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±—Ä–∞—É–∑–µ—Ä–∞"
            );
          case "NotFoundError":
            throw new Error("–ú–∏–∫—Ä–æ—Ñ–æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ");
          case "NotSupportedError":
            throw new Error("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ HTTPS –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
          case "OverconstrainedError":
            throw new Error("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è");
          default:
            throw new Error(`–û—à–∏–±–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞: ${error.message}`);
        }
      }

      throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É");
    }
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞ –∞—É–¥–∏–æ
  const setupAudioAnalyser = (stream: MediaStream) => {
    try {
      const audioContext = new (window.AudioContext ||
        (window as any).webkitAudioContext)();
      const source = audioContext.createMediaStreamSource(stream);
      const analyser = audioContext.createAnalyser();

      analyser.fftSize = 256;
      source.connect(analyser);

      audioContextRef.current = audioContext;
      analyserRef.current = analyser;

      startAudioLevelMonitoring();
    } catch (error) {
      console.warn("‚ö†Ô∏è Could not setup audio analyser:", error);
    }
  };

  // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ä–æ–≤–Ω—è –∞—É–¥–∏–æ
  const startAudioLevelMonitoring = () => {
    const updateLevel = () => {
      if (analyserRef.current && localStreamRef.current && !callState.isMuted) {
        const dataArray = new Uint8Array(analyserRef.current.frequencyBinCount);
        analyserRef.current.getByteFrequencyData(dataArray);

        const average =
          dataArray.reduce((sum, value) => sum + value, 0) / dataArray.length;
        setAudioLevel(average / 255);
      }

      if (callState.isConnected || localStreamRef.current) {
        animationRef.current = requestAnimationFrame(updateLevel);
      }
    };

    updateLevel();
  };

  // –ù–∞—á–∞—Ç—å –∑–≤–æ–Ω–æ–∫
  const startCall = async () => {
    if (!peer || peer.destroyed) {
      setStatus("‚ùå P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ");
      return;
    }

    if (!remoteId.trim()) {
      alert("–í–≤–µ–¥–∏—Ç–µ ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞");
      return;
    }

    try {
      setCallState((prev) => ({ ...prev, isCalling: true }));
      setStatus("üé§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");

      const stream = await getLocalStream();
      setStatus("üîÑ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É...");

      if (!peer || peer.destroyed) {
        throw new Error("P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ");
      }

      const call = peer.call(remoteId.trim(), stream);

      if (!call) {
        throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–≤–æ–Ω–æ–∫");
      }

      // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –∑–≤–æ–Ω–∫–∞
      call.on("stream", (remoteStream) => {
        console.log("üéß Received remote stream");
        handleRemoteStream(remoteStream);
      });

      call.on("close", () => {
        console.log("üì¥ Call closed");
        handleCallEnd();
      });

      call.on("error", (error) => {
        console.error("‚ùå Call error:", error);
        setStatus(`–û—à–∏–±–∫–∞ –∑–≤–æ–Ω–∫–∞: ${error.message}`);
        handleCallEnd();
      });

      currentCallRef.current = call;
      setCallState((prev) => ({
        ...prev,
        isConnected: true,
        isCalling: false,
      }));
      setStatus("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    } catch (error) {
      console.error("‚ùå Error starting call:", error);
      setStatus(
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–≤–æ–Ω–∫–∞"
      );
      setCallState((prev) => ({ ...prev, isCalling: false }));
    }
  };

  // –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∑–≤–æ–Ω–æ–∫
  const answerCall = async (call: MediaConnection) => {
    try {
      setStatus("üé§ –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É...");
      const stream = await getLocalStream();

      console.log("‚úÖ Answering call from:", call.peer);
      call.answer(stream);

      call.on("stream", (remoteStream) => {
        console.log("üéß Received remote stream in answer");
        handleRemoteStream(remoteStream);
      });

      call.on("close", () => {
        console.log("üì¥ Answered call closed");
        handleCallEnd();
      });

      currentCallRef.current = call;
      setCallState((prev) => ({
        ...prev,
        isConnected: true,
        isReceivingCall: false,
        incomingCallId: null,
      }));
      setStatus("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ");
    } catch (error) {
      console.error("‚ùå Error answering call:", error);
      setStatus(
        error instanceof Error ? error.message : "–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∑–≤–æ–Ω–æ–∫"
      );
      setCallState((prev) => ({
        ...prev,
        isReceivingCall: false,
        incomingCallId: null,
      }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –ø–æ—Ç–æ–∫–∞
  const handleRemoteStream = (remoteStream: MediaStream) => {
    console.log("üîä Setting remote stream");
    if (remoteAudioRef.current) {
      remoteAudioRef.current.srcObject = remoteStream;
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –≥—Ä–æ–º–∫–æ—Å—Ç—å
      remoteAudioRef.current.volume = 1.0;

      // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
      remoteAudioRef.current.play().catch((error) => {
        console.error("‚ùå Error playing remote audio:", error);
        // –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
        setTimeout(() => {
          if (remoteAudioRef.current) {
            remoteAudioRef.current.play().catch(console.error);
          }
        }, 100);
      });
    }
  };

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞
  const handleCallEnd = () => {
    console.log("üìû Ending call");

    if (animationRef.current) {
      cancelAnimationFrame(animationRef.current);
      animationRef.current = null;
    }

    if (audioContextRef.current) {
      audioContextRef.current.close();
      audioContextRef.current = null;
    }

    if (currentCallRef.current) {
      currentCallRef.current.close();
      currentCallRef.current = null;
    }

    if (localStreamRef.current) {
      localStreamRef.current.getTracks().forEach((track) => {
        track.stop();
        console.log("‚èπÔ∏è Stopped track:", track.kind);
      });
      localStreamRef.current = null;
    }

    if (remoteAudioRef.current) {
      remoteAudioRef.current.srcObject = null;
    }

    setCallState({
      isConnected: false,
      isCalling: false,
      isMuted: false,
      isReceivingCall: false,
      incomingCallId: null,
    });
    setAudioLevel(0);
    setStatus("üì¥ –ó–≤–æ–Ω–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω");

    setTimeout(() => {
      setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º");
    }, 2000);
  };

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∑–≤—É–∫–∞
  const toggleMute = () => {
    if (localStreamRef.current) {
      const audioTrack = localStreamRef.current.getAudioTracks()[0];
      if (audioTrack) {
        audioTrack.enabled = !audioTrack.enabled;
        const newMutedState = !audioTrack.enabled;
        setCallState((prev) => ({ ...prev, isMuted: newMutedState }));
        console.log("üîá Muted:", newMutedState);
      }
    }
  };

  // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(myId);
      setStatus("üìã ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
      setTimeout(() => setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º"), 2000);
    } catch (error) {
      console.error("‚ùå Clipboard error:", error);
      // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
      const textArea = document.createElement("textarea");
      textArea.value = myId;
      textArea.style.position = "fixed";
      textArea.style.left = "-999999px";
      textArea.style.top = "-999999px";
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      document.execCommand("copy");
      document.body.removeChild(textArea);
      setStatus("üìã ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!");
      setTimeout(() => setStatus("üü¢ –ì–æ—Ç–æ–≤ –∫ –∑–≤–æ–Ω–∫–∞–º"), 2000);
    }
  };

  return (
    <div className="audio-call">
      <div className="call-container">
        <header>
          <h1>üéß –ó–≤–æ–Ω–∏–ª–∫–∞</h1>
        </header>

        {isPeerLoading && (
          <div className="loading-indicator">
            <div className="spinner"></div>
            <p>–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è P2P —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è...</p>
          </div>
        )}

        <div className="connection-info">
          <div className="id-section">
            <label>–í–∞—à ID (2 —Ü–∏—Ñ—Ä—ã):</label>
            <input
              type="text"
              value={myId}
              readOnly
              className="id-input short-id"
              placeholder="–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è..."
              style={{
                fontSize: "1.5rem",
                textAlign: "center",
                letterSpacing: "0.2em",
              }}
            />
            <button
              onClick={copyToClipboard}
              className="copy-btn"
              disabled={!myId}
              title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID"
            >
              üìã
            </button>
          </div>

          <div className="remote-id-section">
            <label>ID —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ (2 —Ü–∏—Ñ—Ä—ã):</label>
            <input
              type="text"
              value={remoteId}
              onChange={(e) => setRemoteId(e.target.value)}
              placeholder="42"
              className="remote-id-input short-id"
              disabled={callState.isConnected || callState.isCalling}
              style={{ fontSize: "1.2rem", textAlign: "center" }}
            />
          </div>
        </div>

        <div className="call-controls">
          {!callState.isConnected &&
            !callState.isCalling &&
            !callState.isReceivingCall && (
              <button
                onClick={startCall}
                className="call-btn primary"
                disabled={!peer || !remoteId.trim() || isPeerLoading}
              >
                üìû –ü–æ–∑–≤–æ–Ω–∏—Ç—å
              </button>
            )}

          {callState.isCalling && (
            <button onClick={handleCallEnd} className="call-btn danger">
              ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å
            </button>
          )}

          {callState.isReceivingCall && (
            <div className="incoming-call">
              <div className="pulse-indicator"></div>
              <p>üìû –í—Ö–æ–¥—è—â–∏–π –∑–≤–æ–Ω–æ–∫...</p>
              <p>–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ 2 —Å–µ–∫</p>
            </div>
          )}

          {callState.isConnected && (
            <>
              <button
                onClick={toggleMute}
                className={`call-btn ${
                  callState.isMuted ? "muted" : "unmuted"
                }`}
                title={
                  callState.isMuted ? "–í–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω" : "–û—Ç–∫–ª—é—á–∏—Ç—å –º–∏–∫—Ä–æ—Ñ–æ–Ω"
                }
              >
                {callState.isMuted ? "üîá –í–∫–ª—é—á–∏—Ç—å" : "üé§ –û—Ç–∫–ª—é—á–∏—Ç—å"}
              </button>
              <button onClick={handleCallEnd} className="call-btn danger">
                üìû –ó–∞–≤–µ—Ä—à–∏—Ç—å
              </button>
            </>
          )}
        </div>

        {/* –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —É—Ä–æ–≤–Ω—è –∑–≤—É–∫–∞ */}
        {callState.isConnected && !callState.isMuted && (
          <div className="audio-level-indicator">
            <div className="audio-level-label">–£—Ä–æ–≤–µ–Ω—å –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞:</div>
            <div className="audio-level-bar">
              <div
                className="audio-level-fill"
                style={{ width: `${audioLevel * 100}%` }}
              ></div>
            </div>
          </div>
        )}

        <div
          className={`status ${
            callState.isConnected
              ? "connected"
              : callState.isCalling
              ? "calling"
              : ""
          }`}
        >
          <span>{status}</span>
          {callState.isConnected && (
            <div className="connection-indicator">
              <span className="indicator-dot"></span>–í —ç—Ñ–∏—Ä–µ
            </div>
          )}
        </div>

        {/* –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π audio —ç–ª–µ–º–µ–Ω—Ç */}
        <audio
          ref={remoteAudioRef}
          autoPlay
          playsInline
          style={{ display: "none" }}
        />
      </div>
    </div>
  );
};

export default AudioCall;
